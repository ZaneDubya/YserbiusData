#include "defines.loh"
#include "flags.loh"

#define DETECTED_DOOR 1
#define WAR1 1
#define WAR2 2
#define WAR3 3
#define WAR4 4
#define WAR5 5
#define WAR6 6
#define WAR7 7
#define CTR 8
#define TRACKING 9
#define POTIONSGONE 10
#define GOTBRINEREWARD 11
#define GOTSALTREWARD 12
#define GOTFREEZERMESSAGE 13
#define GOTMIXINGMESSAGE 14
#define GOTKNEADINGMESSAGE 15
#define FROSTINGMESSAGE 16
#define SOUPMESSAGE 17
#define COOLINGMESSAGE 18
#define COOLINGMESSAGE2 19
#define SALADMESSAGE 20
#define GENERICMESSAGE 21
#define BIGMESSAGE 22
#define BUTCHERMESSAGE 23
#define GOTWINEREWARD 24
#define TOOKPOTIONS 25

fun TakePotions(context) {
    var i;
    for (i = 1; i < 23; i++) {
        context.SetFlag(PARTY, POTIONSGONE, 0);
        if (context.HasItem(BEGONIABALM)) {
            context.SetFlag(PARTY, POTIONSGONE, 1);
            context.TakeItem(BEGONIABALM);
        }
        if (context.HasItem(PETUNIAPOULTICE)) {
            context.SetFlag(PARTY, POTIONSGONE, 1);
            context.TakeItem(PETUNIAPOULTICE);
        }
        if (context.HasItem(LAVENDERLOTION)) {
            context.SetFlag(PARTY, POTIONSGONE, 1);
            context.TakeItem(LAVENDERLOTION);
        }
        if (context.HasItem(DRAGONFLAGON)) {
            context.SetFlag(PARTY, POTIONSGONE, 1);
            context.TakeItem(DRAGONFLAGON);
        }
        if (context.HasItem(MUGWORTMEAD)) {
            context.SetFlag(PARTY, POTIONSGONE, 1);
            context.TakeItem(MUGWORTMEAD);
        }
        if (context.HasItem(WILLOWBARKWINE)) {
            context.SetFlag(PARTY, POTIONSGONE, 1);
            context.TakeItem(WILLOWBARKWINE);
        }
        if (context.HasItem(JUNIPERJUICE)) {
            context.SetFlag(PARTY, POTIONSGONE, 1);
            context.TakeItem(JUNIPERJUICE);
        }
        if (context.HasItem(BLESSPOTION)) {
            context.SetFlag(PARTY, POTIONSGONE, 1);
            context.TakeItem(BLESSPOTION);
        }
        if (context.HasItem(BLUEBERRYBREW)) {
            context.SetFlag(PARTY, POTIONSGONE, 1);
            context.TakeItem(BLUEBERRYBREW);
        }
        if (context.HasItem(ELDERBERRYELIXIR)) {
            context.SetFlag(PARTY, POTIONSGONE, 1);
            context.TakeItem(ELDERBERRYELIXIR);
        }
        if (context.HasItem(WOADWINE)) {
            context.SetFlag(PARTY, POTIONSGONE, 1);
            context.TakeItem(WOADWINE);
        }
        if (context.HasItem(PALACECHALICE)) {
            context.SetFlag(PARTY, POTIONSGONE, 1);
            context.TakeItem(PALACECHALICE);
        }
        if (context.GetFlag(PARTY, POTIONSGONE) == 1) {
            context.SetFlag(PARTY, TOOKPOTIONS, 1);
        }
        if (context.GetFlag(PARTY, POTIONSGONE) == 0) {
            i = 24;
        }
    }
}

fun MapEvent01(context) {
    if (context.UsedSkill(DETECT_SKILL) >= 4 || context.UsedSpell(TRUE_SEEING_SPELL) || context.UsedItem(IVARSHELM, IVARSHELM) || context.UsedItem(ANTLEREDHELM, ANTLEREDHELM) || context.UsedItem(ALCUINSRING, ALCUINSRING) || context.UsedItem(ALCUINSSTICKS, ALCUINSSTICKS)) {
        context.ShowText("I guess you weren't above stealing a spoon.  You find six gold pieces worth of random silverware.");
        context.ModGold(6);
        if (!(context.GetGuild == THIEF)) {
            context.ShowText("But you sure feel bad doing it.  Cheap, somehow.  As if it is beneath the dignity of your profession to be reduced to filching forks.");
            context.AddExperience(-500);
        }
    }
}

fun MapEvent02(context) {
    if (context.UsedSkill(DETECT_SKILL) >= 9 || context.UsedSpell(TRUE_SEEING_SPELL) || context.UsedItem(IVARSHELM, IVARSHELM) || context.UsedItem(ANTLEREDHELM, ANTLEREDHELM) || context.UsedItem(ALCUINSRING, ALCUINSRING) || context.UsedItem(ALCUINSSTICKS, ALCUINSSTICKS) || context.IsFlagOn(ROOM, DETECTED_DOOR)) {
        context.SetWallItem(DOOR, context.GetTile, context.GetFacing);
        context.SetFlag(ROOM, DETECTED_DOOR, 1);
        if (((context.UsedItem(ALFREDSHAT, ALFREDSHAT)) && (context.HasItem(BRASSLOCKPICK) || context.HasItem(IRONLOCKPICK) || context.HasItem(SILVERLOCKPICK) || context.HasItem(STEELLOCKPICK) || context.HasItem(COLDSTEELLOCKPICK) || context.HasItem(ADAMANTINELOCKPICK))) || ((context.GetSkillLevel(LOCKPICK_SKILL) >= 9) && ((context.UsedItem(IRONLOCKPICK, IRONLOCKPICK)) || (context.UsedItem(SILVERLOCKPICK, ADAMANTINELOCKPICK)))) || (context.UsedItem(SKELETONKEYRING, SKELETONKEYRING))) {
            context.ShowText("You have unlocked the hidden door!");
            context.ClearWallBlock(context.GetTile, context.GetFacing);
        }
        else {
            context.SetWallBlock(context.GetTile, context.GetFacing);
            if (context.UsedItem(WOODENLOCKPICK, BRASSLOCKPICK)) {
                context.TakeItem(WOODENLOCKPICK);
                context.TakeItem(BRASSLOCKPICK);
                context.ShowText("Your lockpick is no more.  It has ceased to key.  It's a stick.  Bereft of heft, it rests in pieces.  This is an ex-lockpick.");
            }
            else {
                context.SetWallBlock(context.GetTile, context.GetFacing);
                context.ShowText("You detect a hidden door, but it is locked.");
            }
        }
    }
    else {
        context.SetWallBlock(context.GetTile, context.GetFacing);
    }
}

fun MapEvent03(context) {
    if (((context.UsedItem(ALFREDSHAT, ALFREDSHAT)) && (context.HasItem(BRASSLOCKPICK) || context.HasItem(IRONLOCKPICK) || context.HasItem(SILVERLOCKPICK) || context.HasItem(STEELLOCKPICK) || context.HasItem(COLDSTEELLOCKPICK) || context.HasItem(ADAMANTINELOCKPICK))) || ((context.GetSkillLevel(LOCKPICK_SKILL) >= 9) && ((context.UsedItem(IRONLOCKPICK, IRONLOCKPICK)) || (context.UsedItem(SILVERLOCKPICK, ADAMANTINELOCKPICK))) || (context.UsedItem(SKELETONKEYRING, SKELETONKEYRING)))) {
        context.ShowText("That was a stiff lock, but you finally got it open.");
        context.ClearWallBlock(context.GetTile, context.GetFacing);
    }
    else {
        context.SetWallBlock(context.GetTile, context.GetFacing);
        if (context.UsedItem(WOODENLOCKPICK, BRASSLOCKPICK)) {
            context.TakeItem(WOODENLOCKPICK);
            context.TakeItem(BRASSLOCKPICK);
            context.ShowText("Your lockpick is no more.  It has ceased to key.  It's a stick.  Bereft of heft, it rests in pieces.  This is an ex-lockpick.");
        }
        else {
            context.SetWallBlock(context.GetTile, context.GetFacing);
            context.ShowText("Funny how an irksome little lock on a flimsy little door can keep out a big strong person like you.");
        }
    }
}

fun MapEvent04(context) {
    if ((context.UsedSkill(READ_TRACKS_SKILL) >= 9) || context.UsedItem(REINDEERHORNHELM, REINDEERHORNHELM) || context.UsedItem(TRACKINGTALISMAN, TRACKINGTALISMAN)) {
        context.ShowText("You find some tracks indicating that something headed off this way.");
        context.SetFlag(PARTY, TRACKING, 1);
    }
}

fun MapEvent05(context) {
    var i;
    i = 0;
    var k;
    k = 0;
    i = context.GetFlag(PARTY, CTR);
    i++;
    k = i;
    if (k > 19) {
        k = (k - 20);
    }
    if (k > 14) {
        k = (k - 15);
    }
    if (k > 9) {
        k = (k - 10);
    }
    if (k > 4) {
        k = (k - 5);
    }
    if (k < 0) {
        k = 0;
    }
    if (k > 29) {
        k = 0;
    }
    if (i > 30) {
        i = 0;
    }
    context.SetFlag(PARTY, CTR, i);
    if ((i == 26) | (i == 20) | (i == 14) | (i == 8) | (i == 2)) {
        switch (k) {
            case 0:
                context.ShowText("You hear some footsteps running away.");
                break;
            case 1:
                context.ShowText("You hear someone staggering towards you.");
                context.ShowPortrait(HALFLINGKNIGHT);
                context.ShowText("A happy halfling knight doffs his cap in your general direction.  Or perhaps that should be a halfling aleknight.");
                context.ShowText("'By my stars and HIC! garters!  This is a great place, is it not?  No matter how much I drink in the cooling room, they keep on putting out more.  I will say this for the Lords of Cawdor: they keep a fine cellar.'");
                context.ShowText("The halfling wobbles off, happily.");
                break;
            case 2:
                context.ShowPortrait(DRAGON);
                context.ShowText("The dragon opens his mouth wide, and as you cower in terror, issues forth a tremendous belch.");
                context.ShowText("'What fears thee so?  I am but taking my constitutional.  There is so much food here that I need not prey on thee.  But I must walk frequently lest I not fit through the doors.  Adieu, little one, adieu.'");
                break;
            case 3:
                if (context.GetFlag(DUNGEON, SEENRORY) == 1) {
                    context.ShowText("Somehow, now that he's gone, the Prunes of Cawdor that Rory told you about will seem less, well, pruney.");
                }
                else {
                    context.ShowPortrait(HALFLINGTHIEF);
                    context.ShowText("'Ah!  Mine bosom companions, chums, friends of great worth!  I am most cheered to see thee, for I have learned that in this very Kitchen one can find The Prunes of Cawdor!");
                    context.ShowText("Used with wit and wisdom, they make certain monsters run away.  'S'truth!  As true as my name is Rory Applebush!  Good seeking!'");
                    context.ShowText("Rory struts off, smiling.");
                }
                break;
            case 4:
                context.ShowPortrait(GREMLINTHIEF);
                context.ShowText("A clutch of clerics decides that they must preach at you of the Gospel of the Bigger Stick!");
                context.SetTreasure(LARGELETTEROFCREDIT, DEADLYSCROLL, 0, 0, 0, 393);
                context.AddEncounter(1, 25);
                if (context.PartyCount > 1) {
                    context.AddEncounter(5, 25);
                }
                if (context.PartyCount > 2) {
                    context.AddEncounter(2, 25);
                    context.AddEncounter(6, 25);
                }
                break;
        }
    }
}

fun MapEvent06(context) {
    context.ShowText("A cold breeze sends shivers down your spine.");
}

fun MapEvent07(context) {
    if (context.GetEquippedWeapon == OHTHERESDAGGER) {
        context.ShowText("The power of the dagger you are holding lifts you above the acidic waters of The Dissolving Pool.");
    }
    else {
        if (context.HasItem(OHTHERESDAGGER)) {
            context.ShowText("Ohthere's Dagger glows, as if it wants to help you, but it seems ineffective from its current location.");
        }
        context.ShowText("Those boiling hot acidic waters really sting!");
        context.DamagePlayer(2000);
    }
}

fun MapEvent08(context) {
    var i;
    if (context.GetEquippedWeapon == OHTHERESDAGGER) {
        context.ShowText("The power of the dagger you are holding lifts you above the acidic waters of The Dissolving Pool.");
    }
    else {
        context.ShowText("The Dissolving Pool continues to work its unpleasant will upon you.");
        TakePotions(context);
        if (context.GetFlag(PARTY, TOOKPOTIONS) == 1) {
            context.ShowText("This isn't good.  The hot waters of the Dissolving Pool have cracked all your potion bottles!");
        }
        context.DamagePlayer(2000);
    }
}

fun MapEvent09(context) {
    context.ShowText("Banquo's ghost is through that door.  If you go through, you better go through fast and low.  The military mastermind that arranged this little steambath is sure to have an ambush waiting.");
    if (context.HasItem(ORANGEBANNER)) {
        context.Teleport(7, 2, 242, EAST);
    }
    else {
        if (context.CheckPartyLevel(28)) {
            context.Teleport(7, 2, 240, EAST);
        }
        else {
            context.Teleport(7, 2, 241, EAST);
        }
    }
}

fun MapEvent0A(context) {
    context.ShowText("This room is filled with bins.  The bins are filled with flour.");
}

fun MapEvent0B(context) {
    context.ShowText("This room is filled with bins.  The bins are filled with sugar.");
}

fun MapEvent0C(context) {
    context.ShowText("This room is filled with bins.  The bins are filled with salt.");
}

fun MapEvent0D(context) {
    context.ShowText("This room is filled with bins.  The bins are filled with pepper.");
}

fun MapEvent0E(context) {
    context.ShowText("This room is filled with barrels.  The barrels are filled with ale.");
}

fun MapEvent0F(context) {
    context.ShowText("This room is filled with barrels and jars.  They are filled with pickled vegetables and preserves.");
}

fun MapEvent10(context) {
    context.ShowText("This is one hot room.  The center aisle is stacked high with cords of firewood, mostly oak.  On the east and west walls are huge fireplaces, heating something (you assume ovens) in the room beyond.  The fires are being stoked by skeletons who glare unfriendlily towards you.");
    context.ShowText("Oh, all right; it's impossible to tell just how a skeleton is glaring, but sure as shooting you wouldn't want to get stuck in the subway after dark with these guys.");
}

fun MapEvent11(context) {
    context.ShowText("Yes, it's a group of lumbar lumberjacks, with more regenerating right next door!  And to top it off, they don't appear to be affected by the stifling heat in here the way you are.");
    context.DamagePlayer(context.GetMaxHealth / 3);
    context.SetTreasure(0, 0, 0, 0, 0, 2);
    context.AddEncounter(1, 28);
    context.AddEncounter(5, 28);
    if (context.PartyCount > 2) {
        context.AddEncounter(2, 28);
        context.AddEncounter(6, 28);
    }
}

fun MapEvent12(context) {
    context.ShowText("In wisdom or great folly you enter the flames, and let me tell you, it sure is warm in here!  About 5000 hit points warm!");
    context.DamagePlayer(5000);
    context.ShowText("Wait for it!");
    context.ShowText("**********");
    context.ShowText("**********");
    context.ShowText("**********");
    context.ShowText("My money's on folly, but what do I know?");
}

fun MapEvent13(context) {
    context.ShowText("If you wanted to kill yourself, couldn't you have found a gas oven?  These ovens are too hot to be comfortable, and, like I said, they are empty and uninteresting.");
    context.DamagePlayer(500);
}

fun MapEvent14(context) {
    context.ShowText("Look, mate, it's an oven.  It gets hot.  Very hot.  You put things in it and they get cooked.  Like you are getting cooked right now.  Would I lie to you?");
    context.ShowText("All right, all right.  Yes, I would lie to you.  But I'm not lying to you now.  This is a hot hot oven.  Nothing more.  Nothing less.");
    context.DamagePlayer(1500);
}

fun MapEvent15(context) {
    context.ShowText("Through a leaded glass window in the oven doors you can see a hot oven glowing cheerily.  The doors are very warm to your touch, enough to inflict a slight burn.  The oven is empty and uninteresting.");
    context.DamagePlayer(10);
}

fun Cooler(context) {
    context.ShowText("There is a noticeable chill in the air.  This room is filled with countertops and chopping blocks, and many frozen pieces of meat have been set out to thaw.  There are also some jugs of cider and a few bottles of wine set out to chill.  The chill seems to radiate from the east wall.");
}

fun MapEvent16(context) {
    if (context.GetFacing == EAST) {
        context.ShowText("The sign on the door reads: 'The Freezer.'");
    }
    else {
        if (context.GetFlag(PARTY, COOLINGMESSAGE) == 0) {
            context.SetFlag(PARTY, COOLINGMESSAGE, 1);
            Cooler(context);
        }
    }
}

fun MapEvent17(context) {
    if (context.GetFlag(PARTY, GOTFREEZERMESSAGE) == 0) {
        context.SetFlag(PARTY, GOTFREEZERMESSAGE, 1);
        context.ShowText("Boy, is it cold in here!  The entire south and east walls are packed with ice, some of which has been chipped off for personal use, no doubt.");
        context.ShowText("Many kinds of foodstuffs, including sides of beef, several types of plucked poultry, hogs, sheep, and fish, are stored in here, as well as many things you do not recognise.  Whoever stocked this freezer has a good appetite and a better purse.");
        context.ShowText("Now that you've adjusted a bit, you realize that the bitter cold is enough to wound you.");
        context.DamagePlayer(50);
    }
    else {
        context.DamagePlayer(50);
    }
}

fun MapEvent18(context) {
    if (context.GetFlag(PARTY, WAR1) == 0) {
        context.SetFlag(PARTY, WAR1, 1);
        context.ShowText("How nice.  That spook wants to play, and is throwing a snowball at you.");
        context.ShowText("Gadzooks!  That's no snowball.  That's a fireball!");
        context.DamagePlayer(1000);
        context.SetTreasure(ATHELSTANSSWORD, GAUZERING, PETUNIAPOULTICE, 0, 0, 825);
        context.AddEncounter(1, 30);
        context.AddEncounter(2, 30);
        context.AddEncounter(5, 31);
        if (context.PartyCount > 2) {
            context.AddEncounter(6, 31);
        }
        if (context.PartyCount > 3) {
            context.AddEncounter(4, 30);
            context.AddEncounter(3, 30);
        }
    }
    else {
        context.ShowText("The way you splattered those spooks, maybe they were slowed down a bit by the cold.  Speaking of which, it is still cold enough to hurt here.");
        context.DamagePlayer(100);
    }
}

fun MapEvent19(context) {
    if (context.GetFlag(PARTY, WAR2) == 0) {
        context.SetFlag(PARTY, WAR2, 1);
        context.ShowText("The good news is that the undead think this is a cool place to hang out.  The bad news is that the undead think you are uncool.");
        context.DamagePlayer(1500);
        context.SetTreasure(ALFREDSGLOVES, DEADLYSCROLL, LAVENDERLOTION, 0, 0, 666);
        context.AddEncounter(1, 34);
        context.AddEncounter(2, 35);
        context.AddEncounter(5, 29);
        if (context.PartyCount > 1) {
            context.AddEncounter(6, 29);
        }
        if (context.PartyCount > 2) {
            context.AddEncounter(4, 34);
            context.AddEncounter(3, 35);
        }
    }
    else {
        context.ShowText("You fought the undead, but kept your cool.  In fact, you kept it a tad too cool.");
        context.DamagePlayer(800);
    }
}

fun MapEvent1A(context) {
    context.ShowText("It sure is cold in here.");
    context.DamagePlayer(100);
}

fun MapEvent1B(context) {
    context.ShowText("That's better!  Even though you are right next to the blocks of ice, it doesn't hurt any more.  That is better, isn't it?");
    context.DamagePlayer(500);
}

fun MapEvent1C(context) {
    if (context.GetFlag(PARTY, GOTMIXINGMESSAGE) == 0) {
        context.SetFlag(PARTY, GOTMIXINGMESSAGE, 1);
        context.ShowText("This room is filled with implements of mixing: bowls, spoons, whippers, mortars and pestles, of different sizes.");
    }
}

fun MapEvent1D(context) {
    context.ShowText("A small sign posted on the door to the north reads: 'Warning.  The spice room is specially enmagicked to eliminate all unsealed strong odors, lest they contaminate the spices.");
}

fun MapEvent1E(context) {
    if (context.HasItem(GAELICGARLIC)) {
        context.TakeItem(GAELICGARLIC);
    }
}

fun MapEvent1F(context) {
    if (context.GetFlag(PARTY, WAR3) == 0) {
        context.SetFlag(PARTY, WAR3, 1);
        context.ShowText("Tchee!  A bunch of vampires invite you to dinner, and you don't have any garlic to bring them!");
        context.SetTreasure(FLAIL, BOWOFBADONICUS, LAVENDERLOTION, 0, 0, 847);
        context.AddEncounter(1, 32);
        context.AddEncounter(2, 32);
        context.AddEncounter(5, 33);
        if (context.PartyCount > 1) {
            context.AddEncounter(6, 33);
        }
        if (context.PartyCount > 2) {
            context.AddEncounter(4, 33);
            context.AddEncounter(3, 33);
        }
    }
    else {
        context.ShowText("The scratches on your gorget are all that remind you of the vampires you fought here.");
    }
}

fun MapEvent20(context) {
    if (context.GetFlag(PARTY, GOTKNEADINGMESSAGE) == 0) {
        context.SetFlag(PARTY, GOTKNEADINGMESSAGE, 1);
        context.ShowText("This room is filled with implements of kneading: rolling pins, boards, big rising bowls, containers holding many types of flour, atomizers, etc.");
    }
}

fun MapEvent21(context) {
    if (context.GetFlag(PARTY, FROSTINGMESSAGE) == 0) {
        context.SetFlag(PARTY, FROSTINGMESSAGE, 1);
        context.ShowText("This room is filled with implements of confectionary: small double boilers, frosting appliers, sugars and nuts of every variety, and several types of chocolate.");
    }
}

fun MapEvent22(context) {
    if (context.GetFlag(PARTY, SOUPMESSAGE) == 0) {
        context.SetFlag(PARTY, SOUPMESSAGE, 1);
        context.ShowText("This room is filled with crockpots and staples.  Turnips, parsnips, potatoes, onions, carrots, peas, and most every kind of root vegetable simmer in a plethora of pots.  In fact, the atmosphere in here is rather soupy.");
    }
}

fun MapEvent23(context) {
    if (context.GetFacing == SOUTH) {
        context.ShowText("The sign on the door reads: 'The Freezer.'");
    }
    else {
        if (context.GetFlag(PARTY, COOLINGMESSAGE2) == 0) {
            context.SetFlag(PARTY, COOLINGMESSAGE2, 1);
            Cooler(context);
        }
    }
}

fun MapEvent24(context) {
    context.SetFlag(DUNGEON, LEVEL4ROOM2, 1);
    if (context.GetFlag(PARTY, COOLINGMESSAGE2) == 0) {
        context.SetFlag(PARTY, COOLINGMESSAGE2, 1);
        Cooler(context);
    }
}

fun MapEvent25(context) {
    context.ShowText("This is the way back to the Chambers.");
    context.Teleport(6, 3, 176, EAST);
}

fun MapEvent26(context) {
    if (context.GetFlag(PARTY, COOLINGMESSAGE) == 0) {
        context.SetFlag(PARTY, COOLINGMESSAGE, 1);
        Cooler(context);
    }
}

fun MapEvent27(context) {
    if (context.GetFlag(PARTY, SALADMESSAGE) == 0) {
        context.SetFlag(PARTY, SALADMESSAGE, 1);
        context.ShowText("This room is filled with implements of saladizing.  There are six different types of lettuce washers.  There are collanders, and carrot peelers, and intricate little tools that turn radishes into lovely garnishes, yum yum.");
        context.ShowText("Right.  Too much time in the kitchen.  Sigh....");
    }
}

fun MapEvent28(context) {
    if (context.GetFlag(PARTY, BUTCHERMESSAGE) == 0) {
        context.SetFlag(PARTY, BUTCHERMESSAGE, 1);
        context.ShowText("This is where they prepare the meat prior to using or freezing it.  A number of processes far too detailed to pass INN's Community Standards are in various states of completion.  It's enough to make you consider becoming a vegetarian.");
    }
}

fun MapEvent29(context) {
    if (context.GetFlag(PARTY, GENERICMESSAGE) == 0) {
        context.SetFlag(PARTY, GENERICMESSAGE, 1);
        context.ShowText("This is a normal, run of the mill, multipurpose kitchen room, adaptable to any requirement.");
    }
}

fun MapEvent2A(context) {
    if (context.GetFlag(PARTY, BIGMESSAGE) == 0) {
        context.SetFlag(PARTY, BIGMESSAGE, 1);
        context.ShowText("Boy, is this a big room!  Most of the west end is filled with implements of washing.  There are oodles of silverware and boodles of flatware prepared in hutches and on shelves along the south wall, ready to be loaded onto the many trolleys and taken, well, somewhere else.");
        context.ShowText("Of course, we know you are far too honest to consider knicking the cutlery, eh?");
    }
}

fun MapEvent2B(context) {
    if (context.GetFlag(PARTY, WAR4) == 0) {
        context.SetFlag(PARTY, WAR4, 1);
        context.ShowText("This must have good salads here, because they have attracted a party of adventurers.  Unfortunately, the adventurers want to fight you for the table.");
        context.SetTreasure(LUGHSSPEAR, JUNIPERJUICE, LAVENDERLOTION, 0, 0, 847);
        context.AddEncounter(1, 27);
        context.AddEncounter(2, 26);
        context.AddEncounter(5, 25);
        if (context.PartyCount > 1) {
            context.AddEncounter(6, 25);
        }
        if (context.PartyCount > 2) {
            context.AddEncounter(4, 26);
            context.AddEncounter(3, 27);
        }
    }
    else {
        context.ShowText("All that remains of your battle here are some crushed croutons and a crumble of blue cheese.");
    }
}

fun MapEvent2C(context) {
    if (context.GetFlag(PARTY, WAR5) == 0) {
        context.SetFlag(PARTY, WAR5, 1);
        context.ShowText("It isn't hard to figure out that all this meat is what has lured those dogs and cats here.  It's just a shame that they seem to prefer adventurers to beef.  You must be the other other white meat.");
        context.SetTreasure(IVARSHELM, WOADWINE, LAVENDERLOTION, 0, 0, 847);
        context.AddEncounter(1, 36);
        context.AddEncounter(2, 38);
        context.AddEncounter(5, 36);
        if (context.PartyCount > 1) {
            context.AddEncounter(6, 38);
        }
        if (context.PartyCount > 2) {
            context.AddEncounter(4, 36);
            context.AddEncounter(3, 38);
        }
    }
    else {
        context.ShowText("All that remains of the battle you fought here is enough animal fur to clog an allergic titan.");
    }
}

fun MapEvent2D(context) {
    if (context.GetFlag(PARTY, WAR6) == 0) {
        context.SetFlag(PARTY, WAR6, 1);
        context.ShowText("It's an aerial assault!");
        context.SetTreasure(GUARDIANOFWESSEX, WOADWINE, 0, 0, 0, 1543);
        context.AddEncounter(1, 37);
        context.AddEncounter(2, 37);
        context.AddEncounter(5, 40);
        if (context.PartyCount > 1) {
            context.AddEncounter(6, 40);
        }
        if (context.PartyCount > 2) {
            context.AddEncounter(4, 40);
            context.AddEncounter(3, 40);
        }
    }
    else {
        context.ShowText("The battle you fought here showed that you were just a tad more impressive than those imps.");
    }
}

fun MapEvent2E(context) {
    if (context.GetFlag(PARTY, WAR7) == 0) {
        context.SetFlag(PARTY, WAR7, 1);
        context.ShowText("You didn't want to fight imps?  Well, that's what you pict.");
        context.SetTreasure(ALFREDSHAT, WOADWINE, LAVENDERLOTION, 0, 0, 1929);
        context.AddEncounter(1, 39);
        context.AddEncounter(2, 39);
        context.AddEncounter(5, 40);
        if (context.PartyCount > 1) {
            context.AddEncounter(6, 40);
        }
        if (context.PartyCount > 2) {
            context.AddEncounter(4, 40);
            context.AddEncounter(3, 40);
        }
    }
    else {
        context.ShowText("The battle you fought here showed that you were just a tad more impressive than those imps.");
    }
}

fun MapEvent2F(context) {
    if ((context.GetGuildAny(CLERIC) && context.GetGuildAny(BARBARIAN) && context.GetGuildAny(THIEF)) || (context.GetFlag(DUNGEON, WONGAME) == 1) || (context.GetFlag(DUNGEON, LEVEL4ROOM3) == 1)) {
        context.ShowPortrait(HALFLINGCLERIC);
        context.ShowText("Some short adventurers hold the door for you.");
        context.ShowText("'Well met!  There are enough undead in there for all of us, and some giants and dragons as well.  May providence smile upon thy works.'");
        context.Teleport(7, 2, 252, NORTH);
    }
    else {
        context.SetWallBlock(context.GetTile, context.GetFacing);
        if (context.GetFlag(DUNGEON, OOPSMESSAGE0701) == 0) {
            context.SetFlag(DUNGEON, OOPSMESSAGE0701, 1);
            context.ShowText("Not another locked door!  This one leads to The Cabinet, or at least it would if you had the right combination of people to get it open.");
            context.ShowText("Oh, come on.  You had to figure out at least a level down that some of these rooms require names acronymically defined before they'll let you in the first time.");
            context.ShowText("You didn't?  You mean I just told you?  Oh dear.  Would you mind not mentioning this to any of the other computers?  It can be our secret.  You wouldn't want me to look bad, would you?");
        }
        else {
            context.ShowText("Oh.  Cool!  You're pretending you don't know you need a Cleric, Barbarian, and Thief to enter the Cabinet so nobody will suspect that I gave away the secret of those types of puzzles.");
            context.ShowText("Don't worry!  To reward you, I won't make any more of those upstairs.");
        }
    }
}

fun MapEvent30(context) {
    if ((context.UsedSkill(DETECT_SKILL) >= 11 || context.UsedItem(ALCUINSSTICKS, ALCUINSSTICKS)) && (context.GetFlag(PARTY, GOTWINEREWARD) == 0)) {
        context.SetFlag(PARTY, GOTWINEREWARD, 1);
        context.ShowText("Deep in a cabinet, hidden behind many bottles, you spot a glimpse of blue.  You investigate further, and find an unused bottle of Woad Wine.  Nasty stuff, Woad Wine, but it sure restores the mana points!");
        context.GiveItem(WOADWINE);
    }
}

fun MapEvent31(context) {
    if ((context.UsedSkill(DETECT_SKILL) >= 11 || context.UsedItem(ALCUINSSTICKS, ALCUINSSTICKS)) && (context.GetFlag(PARTY, GOTSALTREWARD) == 0) && (!(context.HasItem(PALACECHALICE)))) {
        context.SetFlag(PARTY, GOTSALTREWARD, 1);
        context.ShowText("Buried in the salt you find something worth far more than its weight in salt.  It's a palace chalice!");
        context.GiveItem(PALACECHALICE);
    }
}

fun MapEvent32(context) {
    if ((context.UsedSkill(DETECT_SKILL) >= 11 || context.UsedItem(ALCUINSSTICKS, ALCUINSSTICKS)) && (context.GetFlag(PARTY, GOTBRINEREWARD) == 0) && (!(context.HasItem(THEPRUNESOFCAWDOR)))) {
        context.SetFlag(PARTY, GOTBRINEREWARD, 1);
        context.ShowText("Wait a second.  Those are no pickles.  They must be the legendary Prunes of Cawdor!");
        context.GiveItem(THEPRUNESOFCAWDOR);
    }
}

fun MapEvent33(context) {
    context.SetFlag(DUNGEON, LEVEL4ROOM2, 1);
}
