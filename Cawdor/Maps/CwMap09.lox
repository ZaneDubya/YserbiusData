#include "defines.loh"
#include "flags.loh"

#define DETECTED_DOOR 1
#define READYTOGO 2
#define WAR1 1
#define WAR2 2
#define WAR3 3
#define WAR4 4
#define WAR5 5
#define WAR6 6
#define WAR7 7
#define CTR 8
#define TRACKING 9
#define ELFWARNING 10
#define SMELLPANTRY 11
#define SAWWINE 12
#define SAWMEAL 13
#define SAWBARLEY 14
#define SAWHOPS 15
#define SAWRYE 16
#define SAWVEGIE 17
#define SAWMEAT 18
#define SAWFRUIT 19
#define GIVEWINE 20

fun MapEvent05(context) {
    if (context.GetFlag(PARTY, GIVEWINE) == 1) {
        context.ShowText("By jove!  It was an intact bottle underneath all that rubble!  Judging from the way it survived, it must contain a powerful healing potion which healed the flagon as fast as it was cracked.");
        context.SetFlag(PARTY, GIVEWINE, 0);
        context.GiveItem(DRAGONFLAGON);
    }
}

fun MapEvent0D(context) {
    if (context.GetFlag(PARTY, SMELLPANTRY) == 0) {
        context.SetFlag(DUNGEON, LEVEL2ROOM2, 1);
        context.SetFlag(PARTY, SMELLPANTRY, 1);
        context.ShowText("A hundred interesting odors battle for your attention.  Most pungent are the spices, but you can also smell grains, vegetables, and meat, as well as burlap, barrels, and sealing wax.  This must be the pantry.");
    }
}

fun MapEvent0E(context) {
    if (context.GetFlag(PARTY, WAR1) == 0) {
        context.SetFlag(PARTY, WAR1, 1);
        context.ShowText("It lookth like thith ith going to be a wraith againtth time!");
        if ((context.GetFlag(PARTY, WAR2) == 1) && (context.GetFlag(PARTY, WAR3) == 1) && (context.GetFlag(PARTY, WAR4) == 1) && (context.GetFlag(PARTY, WAR5) == 1) && (context.GetFlag(PARTY, WAR6) == 1) && (context.GetFlag(PARTY, WAR7) == 1) && (!(context.HasItem(CRACKOFDOOM))) && context.FlagOn(DUNGEON, WENTLEFT0401)) {
            context.SetBooty(CRACKOFDOOM, LAVENDERLOTION, 0, 0, 0, 125);
        }
        else {
            context.SetBooty(MARTELSBLADE, SMALLLETTEROFCREDIT, PETUNIAPOULTICE, 0, 0, 125);
        }
        context.GetMonster(1, 38);
        context.GetMonster(5, 40);
        if (context.PartyCount > 2) {
            context.GetMonster(2, 39);
            context.GetMonster(6, 38);
        }
        if (context.PartyCount > 3) {
            context.GetMonster(4, 40);
            context.GetMonster(3, 40);
        }
    }
    else {
        context.ShowText("All that remains from your battle here is a broken scythe and a scrap of black cloth.");
    }
}

fun MapEvent0F(context) {
    if (context.GetFlag(PARTY, WAR2) == 0) {
        context.SetFlag(PARTY, WAR2, 1);
        context.ShowText("Leaping lizards!  Look at all those leopards!");
        if (context.PartyCount > 3) {
            context.ShowText("Not to mention their mocking masters!");
        }
        if ((context.GetFlag(PARTY, WAR1) == 1) && (context.GetFlag(PARTY, WAR3) == 1) && (context.GetFlag(PARTY, WAR4) == 1) && (context.GetFlag(PARTY, WAR5) == 1) && (context.GetFlag(PARTY, WAR6) == 1) && (context.GetFlag(PARTY, WAR7) == 1) && (!(context.HasItem(CRACKOFDOOM))) && context.FlagOn(DUNGEON, WENTLEFT0401)) {
            context.SetBooty(CRACKOFDOOM, LAVENDERLOTION, 0, 0, 0, 125);
        }
        else {
            context.SetBooty(0, 0, 0, 0, 0, 187);
        }
        context.GetMonster(1, 34);
        context.GetMonster(2, 34);
        if (context.PartyCount > 2) {
            context.GetMonster(3, 34);
            context.GetMonster(4, 34);
        }
        if (context.PartyCount > 3) {
            context.GetMonster(5, 28);
            context.GetMonster(6, 28);
        }
    }
    else {
        context.ShowText("All that remains from your battle here is a snapped whisker and splintered claw.");
    }
}

fun MapEvent10(context) {
    if (context.GetFlag(PARTY, WAR3) == 0) {
        context.SetFlag(PARTY, WAR3, 1);
        context.ShowText("At least you can tell that those brain pans can't possibly know how to cast spells against you. ");
        if ((context.GetFlag(PARTY, WAR1) == 1) && (context.GetFlag(PARTY, WAR2) == 1) && (context.GetFlag(PARTY, WAR4) == 1) && (context.GetFlag(PARTY, WAR5) == 1) && (context.GetFlag(PARTY, WAR6) == 1) && (context.GetFlag(PARTY, WAR7) == 1) && (!(context.HasItem(CRACKOFDOOM))) && context.FlagOn(DUNGEON, WENTLEFT0401)) {
            context.SetBooty(CRACKOFDOOM, LAVENDERLOTION, 0, 0, 0, 125);
        }
        else {
            context.SetBooty(DUNCANSAXE, BOOMERANGSCROLL, PETUNIAPOULTICE, 0, 0, 125);
        }
        context.GetMonster(1, 31);
        context.GetMonster(2, 32);
        if (context.PartyCount > 2) {
            context.GetMonster(3, 31);
            context.GetMonster(4, 32);
        }
        if (context.PartyCount > 3) {
            context.GetMonster(5, 33);
            context.GetMonster(6, 33);
        }
    }
    else {
        context.ShowText("All that remains from your battle here is a broken club and a scrap of fur.");
    }
}

fun MapEvent11(context) {
    if (context.GetFlag(PARTY, WAR4) == 0) {
        context.SetFlag(PARTY, WAR4, 1);
        context.ShowText("Those monsters are not just wyvern hello.");
        if ((context.GetFlag(PARTY, WAR1) == 1) && (context.GetFlag(PARTY, WAR2) == 1) && (context.GetFlag(PARTY, WAR3) == 1) && (context.GetFlag(PARTY, WAR5) == 1) && (context.GetFlag(PARTY, WAR6) == 1) && (context.GetFlag(PARTY, WAR7) == 1) && (!(context.HasItem(CRACKOFDOOM))) && context.FlagOn(DUNGEON, WENTLEFT0401)) {
            context.SetBooty(CRACKOFDOOM, LAVENDERLOTION, 0, 0, 0, 125);
        }
        else {
            context.SetBooty(LONGSPEAR, LEFTARMSCROLL, PETUNIAPOULTICE, 0, 0, 953);
        }
        context.GetMonster(1, 35);
        context.GetMonster(5, 35);
        if (context.PartyCount > 2) {
            context.GetMonster(2, 36);
            context.GetMonster(6, 36);
        }
        if (context.PartyCount > 3) {
            context.GetMonster(4, 37);
            context.GetMonster(3, 37);
        }
    }
    else {
        context.ShowText("All that remains from your battle here is a broken tooth and a bit of scale.  The scavengers in this place must have cast-iron stomachs.");
    }
}

fun MapEvent12(context) {
    if (context.GetFlag(PARTY, WAR5) == 0) {
        context.SetFlag(PARTY, WAR5, 1);
        context.ShowText("It looks like a whole mobs of halflings.  The question is: do you count their arms and divide by two or four to figure out how many halflings there are?");
        if (context.PartyCount > 3) {
            context.ShowText("And whether they are half, full, or quarter, those elves do not look friendly!");
        }
        if ((context.GetFlag(PARTY, WAR1) == 1) && (context.GetFlag(PARTY, WAR2) == 1) && (context.GetFlag(PARTY, WAR3) == 1) && (context.GetFlag(PARTY, WAR4) == 1) && (context.GetFlag(PARTY, WAR6) == 1) && (context.GetFlag(PARTY, WAR7) == 1) && (!(context.HasItem(CRACKOFDOOM))) && context.FlagOn(DUNGEON, WENTLEFT0401)) {
            context.SetBooty(CRACKOFDOOM, LAVENDERLOTION, 0, 0, 0, 125);
        }
        else {
            context.SetBooty(COMPOSITEBOW, SMALLLETTEROFCREDIT, LINDENSHIELD, 0, 0, 562);
        }
        context.GetMonster(1, 25);
        context.GetMonster(5, 26);
        if (context.PartyCount > 2) {
            context.GetMonster(2, 25);
            context.GetMonster(6, 26);
        }
        if (context.PartyCount > 3) {
            context.GetMonster(4, 27);
            context.GetMonster(3, 27);
        }
    }
    else {
        context.ShowText("All that remains from your battle here is a broken goblet and a snapped bow string.");
    }
}

fun MapEvent13(context) {
    if (context.GetFlag(PARTY, WAR6) == 0) {
        context.SetFlag(PARTY, WAR6, 1);
        context.ShowText("With a faint smell of sulphur and brimstone, you are impressively beset.");
        if ((context.GetFlag(PARTY, WAR1) == 1) && (context.GetFlag(PARTY, WAR2) == 1) && (context.GetFlag(PARTY, WAR3) == 1) && (context.GetFlag(PARTY, WAR4) == 1) && (context.GetFlag(PARTY, WAR5) == 1) && (context.GetFlag(PARTY, WAR7) == 1) && (!(context.HasItem(CRACKOFDOOM))) && context.FlagOn(DUNGEON, WENTLEFT0401)) {
            context.SetBooty(CRACKOFDOOM, LAVENDERLOTION, 0, 0, 0, 125);
        }
        else {
            context.SetBooty(STEELBREASTPLATE, BLUETARTANCLOAK, HALFPLATE, WOOLENCLOAK, 0, 125);
        }
        context.GetMonster(1, 30);
        context.GetMonster(5, 28);
        if (context.PartyCount > 2) {
            context.GetMonster(2, 29);
            context.GetMonster(6, 28);
        }
        if (context.PartyCount > 3) {
            context.GetMonster(4, 30);
            context.GetMonster(3, 29);
        }
    }
    else {
        context.ShowText("All that remains from your battle here is a burnt pack of playing cards and a half melted poker chip.");
    }
}

fun MapEvent14(context) {
    if (context.GetFlag(PARTY, WAR7) == 0) {
        context.SetFlag(PARTY, WAR7, 1);
        context.ShowText("An unusual combination of creatures has chosen to inhabit this spot.  Maybe you will investigate it later.");
        if (context.PartyCount > 3) {
            context.ShowText("That is, of course, if you survive.");
        }
        if ((context.GetFlag(PARTY, WAR1) == 1) && (context.GetFlag(PARTY, WAR2) == 1) && (context.GetFlag(PARTY, WAR3) == 1) && (context.GetFlag(PARTY, WAR4) == 1) && (context.GetFlag(PARTY, WAR5) == 1) && (context.GetFlag(PARTY, WAR6) == 1) && (!(context.HasItem(CRACKOFDOOM))) && context.FlagOn(DUNGEON, WENTLEFT0401)) {
            context.SetBooty(CRACKOFDOOM, LAVENDERLOTION, 0, 0, 0, 125);
        }
        else {
            context.SetBooty(IRONCROWN, WOODSMANSAXE, CATHNESSSCLUB, REDTARTANCLOAK, 0, 125);
        }
        context.GetMonster(1, 33);
        context.GetMonster(5, 40);
        if (context.PartyLevel(12)) {
            if (context.PartyCount > 2) {
                context.GetMonster(2, 33);
                context.GetMonster(6, 40);
            }
            if (context.PartyCount > 3) {
                context.GetMonster(4, 32);
                context.GetMonster(3, 32);
            }
        }
        else {
            if (context.PartyCount > 2) {
                context.GetMonster(2, 31);
                context.GetMonster(6, 38);
            }
            if (context.PartyCount > 3) {
                context.GetMonster(4, 31);
                context.GetMonster(3, 32);
            }
        }
    }
    else {
        context.ShowText("All that remains from your battle here is a broken scythe and a scrap of black cloth.");
    }
}

fun MapEvent15(context) {
    var i;
    i = 0;
    var k;
    k = 0;
    i = context.GetFlag(PARTY, CTR);
    i++;
    k = i;
    if (k > 19) {
        k = (k - 20);
    }
    if (k > 14) {
        k = (k - 15);
    }
    if (k > 9) {
        k = (k - 10);
    }
    if (k > 4) {
        k = (k - 5);
    }
    if (k < 0) {
        k = 0;
    }
    if (k > 29) {
        k = 0;
    }
    if (i > 30) {
        i = 0;
    }
    context.SetFlag(PARTY, CTR, i);
    if ((i == 26) | (i == 20) | (i == 14) | (i == 8) | (i == 2)) {
        switch (k) {
            case 0:
                context.ShowText("You hear some footsteps running away.");
                break;
            case 1:
                context.ShowText("You hear someone running towards you.");
                context.ShowPicture(ORCKNIGHT);
                context.ShowText("*");
                context.ShowText("*");
                context.ShowText("*");
                context.ShowText("The knight looks you over carefully and arrives at a visible decision.  'Thou art neither strong enough nor large enough to be hiding my Claymore.  I need it to defeat the weird sisters.  By the sun and moon, when I find the rogue who stole it, I shall have his head!'  The knight departs.");
                break;
            case 2:
                if (context.PartyLevel(8)) {
                    context.ShowPicture(DRAGON);
                    context.ShowText("This is one dragging dragon.  It is bleeding from several wounds and one eye is closed shut.  Before you even consider attacking it, it turns and flies off.");
                }
                else {
                    context.ShowText("A group of desperate dragons decides to have you for lunch.");
                    context.ShowText("That is more of a command performance than an invitation.");
                    context.SetBooty(0, 0, 0, 0, 0, 11);
                    context.GetMonster(1, 35);
                    if (context.PartyCount > 3) {
                        context.GetMonster(5, 35);
                    }
                }
                break;
            case 3:
                if (context.GetFlag(DUNGEON, SEENRORY) == 0) {
                    context.ShowPicture(HALFLINGTHIEF);
                    context.ShowText("*");
                    context.ShowText("*");
                    context.ShowText("*");
                    context.ShowText("'I think we have met before.  In sooth, did I not offer thee some wyrmish wampum?  If thou art headed westwards, forewarned is forearmed: undead hold much of the Lesser Hall. ");
                    context.ShowText("Southwards it is giants and golems and gremlins, oh my!  Be seeing you!");
                    context.ShowText("The halfling struts off, smiling.");
                }
                else {
                    context.ShowText("Giants and golems and gremlins, indeed.  But it was dragons that Rory should have feared the most.");
                }
                break;
            case 4:
                context.ShowText("*");
                context.ShowText("*");
                context.ShowText("*");
                context.ShowText("A somewhat battered horde o'halflings decides, rather insultingly, that they are bigger than you are.");
                context.SetBooty(SMALLLETTEROFCREDIT, LEFTARMSCROLL, 0, 0, 0, 93);
                context.GetMonster(1, 25);
                if (context.PartyCount > 1) {
                    context.GetMonster(5, 26);
                }
                if (context.PartyCount > 2) {
                    context.GetMonster(2, 25);
                    context.GetMonster(6, 26);
                }
                break;
        }
    }
}

fun MapEvent16(context) {
    if (context.GetFlag(PARTY, ELFWARNING) == 0) {
        context.SetFlag(PARTY, ELFWARNING, 1);
        context.ShowPicture(ELFCLERIC);
        context.ShowText("*");
        context.ShowText("*");
        context.ShowText("*");
        context.ShowText("You come upon a dying elf.  His dying words are, 'I know not that I can trust thee, but my news forces the risk.  The Undead Kings have allied with the Picts, and oft where one is found, both are near.'  With a slowly released breath, the elf dies.");
    }
}

fun MapEvent17(context) {
    if (context.FlagOn(ROOM, READYTOGO)) {
        context.Teleport(4, 1, 10, SOUTH);
        context.ShowText("This must lead to that section of the Gallery that you could not reach before.");
    }
    else {
        if ((context.UsedSkill(DETECT_SKILL) >= 6) || context.UsedSpell(TRUE_SEEING_SPELL) || context.UsedItem(CRYSTALBALL, CRYSTALBALL) || context.UsedItem(ALCUINSRING, ALCUINSRING) || context.UsedItem(ALCUINSSTICKS, ALCUINSSTICKS) || context.FlagOn(ROOM, DETECTED_DOOR) || (context.GetFlag(DUNGEON, WONGAME) == 1)) {
            context.PlaceWallItem(DOOR, context.Here, context.Facing);
            context.SetFlag(ROOM, DETECTED_DOOR, 1);
            if (((context.UsedItem(ALFREDSHAT, ALFREDSHAT)) && (context.HasItem(WOODENLOCKPICK) || context.HasItem(BRASSLOCKPICK) || context.HasItem(IRONLOCKPICK) || context.HasItem(SILVERLOCKPICK) || context.HasItem(STEELLOCKPICK) || context.HasItem(COLDSTEELLOCKPICK) || context.HasItem(ADAMANTINELOCKPICK))) || ((context.GetSkill(LOCKPICK_SKILL) >= 8) && ((context.UsedItem(WOODENLOCKPICK, IRONLOCKPICK)) || (context.UsedItem(SILVERLOCKPICK, ADAMANTINELOCKPICK)))) || (context.UsedItem(SKELETONKEYRING, SKELETONKEYRING)) || (context.GetFlag(DUNGEON, WONGAME) == 1)) {
                context.ShowText("You have unlocked the hidden door!");
                context.ClearWall(context.Here, context.Facing);
                context.SetFlag(ROOM, READYTOGO, 1);
            }
            else {
                context.ShowText("You detect a hidden door, but it is locked.");
                context.BlockWall(context.Here, context.Facing);
            }
        }
        else {
            context.BlockWall(context.Here, context.Facing);
        }
    }
}

fun MapEvent18(context) {
    context.Teleport(4, 1, 13, SOUTH);
}

fun MapEvent19(context) {
    context.Teleport(5, 1, 143, WEST);
}

fun MapEvent1A(context) {
    if (context.GetFlag(PARTY, SAWWINE) == 0) {
        context.ShowText("This room is noticeably cooler than the others.  Many wine racks have been toppled and you doubt any bottles remain intact.");
        context.SetFlag(PARTY, SAWWINE, 1);
    }
    else {
        if (context.Facing == EAST) {
            context.ShowText("The wine room remains as you saw it.");
        }
    }
}

fun MapEvent1B(context) {
    if ((context.GetFlag(DUNGEON, GOTWINE) == 0) && ((context.UsedSkill(DETECT_SKILL) >= 4) || context.UsedSpell(TRUE_SEEING_SPELL) || context.UsedItem(CRYSTALBALL, CRYSTALBALL) || context.UsedItem(ALCUINSRING, ALCUINSRING) || context.UsedItem(ALCUINSSTICKS, ALCUINSSTICKS))) {
        context.SetFlag(DUNGEON, GOTWINE, 1);
        context.SetFlag(PARTY, GIVEWINE, 1);
        context.ShowText("Yoicks!  Under the influence of your poking and prodding, something round makes a rolling escape from this pile of rubble to the north.");
        context.ShowText("You've chased enough bashful bottles in your day to recognise the sound of one that's intact.");
    }
}

fun MapEvent1C(context) {
    if (context.GetFlag(PARTY, SAWMEAL) == 0) {
        context.ShowText("This room is full of broken bins of oatmeal, no doubt long since gone into the bellies of rats and, you shudder as the thought occurs to you, into haggis.");
        context.SetFlag(PARTY, SAWMEAL, 1);
    }
    else {
        if (context.Facing == EAST) {
            context.ShowText("The oat room remains as you saw it.");
        }
    }
}

fun MapEvent1D(context) {
    if (context.GetFlag(PARTY, SAWBARLEY) == 0) {
        context.ShowText("There are many still sealed barrels labelled with the words 'Best Southfarthing Barley.'  Having nothing to carry it in, you decide not to take it.");
        context.SetFlag(PARTY, SAWBARLEY, 1);
    }
    else {
        if (context.Facing == WEST) {
            context.ShowText("The barley room remains as you saw it.");
        }
    }
}

fun MapEvent1E(context) {
    if (context.GetFlag(PARTY, SAWHOPS) == 0) {
        context.ShowText("This room contains many intact barrels labelled 'Best Bitter Hops.'  Maybe there's a brewery somewhere.");
        context.SetFlag(PARTY, SAWHOPS, 1);
    }
    else {
        if (context.Facing == WEST) {
            context.ShowText("The hops room remains as you saw it.");
        }
    }
}

fun MapEvent1F(context) {
    if (context.GetFlag(PARTY, SAWRYE) == 0) {
        context.ShowText("This room contains many intact sacks of rye, stored on shelves behind thick walls and doors to protect them from the rats.  Maybe there's a distillery in the vicinity.");
        context.SetFlag(PARTY, SAWRYE, 1);
    }
    else {
        if (context.Facing == EAST) {
            context.ShowText("The rye room remains as you saw it.");
        }
    }
}

fun MapEvent20(context) {
    if (context.GetFlag(PARTY, SAWVEGIE) == 0) {
        context.ShowText("This large room is full of reasonably fresh bins of vegetables: carrots, onions, peas, turnips, all sealed for the winter.  A sign on one wall reads, 'Take as you please our parsnips and peas, but prithee, take no leek.");
        context.ShowText("Greengrocer humor: the worst.");
        context.SetFlag(PARTY, SAWVEGIE, 1);
    }
    else {
        if (context.Facing == NORTH) {
            context.ShowText("The grocery room remains as you saw it.");
        }
    }
}

fun MapEvent21(context) {
    if (context.GetFlag(PARTY, SAWMEAT) == 0) {
        context.ShowText("This cold cold room is full of hanging sides of beef, mutton, chickens and ducks.  You never sausage a place (sorry).  A sign on one wall reads, 'Cuz, thou may take a chicken or steak, but prithee, pluck no duck.'");
        context.ShowText("Butcher humor: the wurst.");
        context.SetFlag(PARTY, SAWMEAT, 1);
    }
    else {
        if (context.Facing == SOUTH) {
            context.ShowText("The butcher's room remains as you saw it.");
        }
    }
}

fun MapEvent22(context) {
    if (context.GetFlag(PARTY, SAWFRUIT) == 0) {
        context.ShowText("This large room is well stocked with fruits of all kinds: apples, berries, cherries, limes, lemons.  A sign on one wall reads, 'Friend, if you dare you may snare thee a pear, but prithee, partake not of the deadly nightshade.' The bin labelled nightshade appears to hold tomatoes.");
        context.ShowText("Orange you glad fruit mongers have no sense of humor?");
        context.SetFlag(PARTY, SAWFRUIT, 1);
    }
    else {
        if (context.Facing == SOUTH) {
            context.ShowText("The fruit mongers room remains as you saw it.");
        }
    }
}

fun MapEvent23(context) {
    context.ShowText("The plaque reads: 'Never eat a dragon's egg when a dragon is nearby.'");
}

fun MapEvent24(context) {
    context.ShowText("The plaque reads: 'A light white wine is appropriate to serve with halflings on toast.'");
}

fun MapEvent25(context) {
    context.ShowText("The plaque reads: 'You can't oversalt a pickle.'");
}

fun MapEvent26(context) {
    context.ShowText("The plaque reads: 'Ware the deadly nightshade, save with fish and chips.'");
}

fun MapEvent27(context) {
    context.ShowText("The plaque reads: 'Be thou not hasty when cooking thy pasty.  Cooked low and slow is the best way to go.'");
}

fun MapEvent28(context) {
    context.ShowText("The plaque reads: 'Chicken soup may do marvels for a sick person, but it does nothing for the chicken.'");
}

fun MapEvent29(context) {
    context.ShowText("The plaque reads: 'Harpy: the other other white meat.'");
}

fun MapEvent2A(context) {
    context.ShowText("The plaque reads: 'If you invite a vampire to dinner, it is a grievous breach of etiquette to serve stake.'");
}

fun MapEvent2B(context) {
    context.ShowText("The plaque reads: 'When dining with zombies, if a bit of your dinner companion should fall off, simply pick it up in a napkin and dispose of it without fuss.'");
}

fun MapEvent2C(context) {
    context.ShowText("The plaque reads: 'When planning a dinner party for dragons, use this simple rule of thumb: twelve pounds of meat for every ten feet of the dragon's length.");
}

fun MapEvent2D(context) {
    context.ShowText("The plaque reads: 'If a harpy informs you that some food or drink has turned, believe her.'");
}

fun MapEvent2E(context) {
    context.ShowText("The plaque reads: 'Hellhounds prefer their meat raw.  They will char it themselves to taste.  Dragons may or may not choose to do so; it is best to include such a query with the invitation.'");
}

fun MapEvent2F(context) {
    context.ShowText("The plaque reads: 'When inviting dragons to a barbeque, be sure to specify whether you are inviting dinner or guests.'");
}

fun MapEvent30(context) {
    context.ShowText("The plaque reads: 'It is unwise to invite skeletons and hellhounds to the same meal.  It is beyond the pale to do so and call out Bury!'");
}

fun MapEvent31(context) {
    context.ShowText("The plaque reads: 'One should plan on ghosts consuming about one tenth as much as a humanoid guest.  But they will invariably consume ten times as much spirits.'");
}

fun MapEvent32(context) {
    context.ShowText("The plaque reads: 'Polite slimes will wait until your other guests have finished before consuming the table scraps.  Impolite slimes will consider your other guests table scraps.'");
}

fun MapEvent33(context) {
    context.ShowText("The plaque reads: 'Most imps enjoy a large, even an excessive quantity of garlic.  Most undead don't.'");
}

fun MapEvent34(context) {
    context.ShowText("The plaque reads: 'If a giant should forget his manners and begin eating his neighbors, rap his knuckles firmly and be prepared to flee.  It is wise, therefore, to seat your less desirable guests near the giants.'");
}

fun MapEvent35(context) {
    context.ShowText("The plaque reads: 'Dragons are very sensitive about their etiquette.  They believe you should consider yourself fortunate that they are not eating you.  Any corrections of a dragon's etiquette is likely to lead to a correction of that oversight.'");
}

fun MapEvent36(context) {
    context.ShowText("The plaque reads: 'Golems are obedient and do not eat.  As such, they make excellent last minute replacements for cancellations.  A wise hostess will keep one in her closet for emergencies.'");
}

fun MapEvent37(context) {
    context.ShowText("The plaque reads: 'It is unwise to invite medusae and bats to the same function.  The bats are sure to get caught in the medusa's hair.  Once that happens, either way, you may be sure that someone will have to write a note of apology.'");
}

fun MapEvent38(context) {
    context.ShowText("The plaque reads: 'It is not preferred to have hedgepigs both on the guest list and on a platter.'");
}

fun MapEvent39(context) {
    context.ShowText("The plaque reads: 'It is a little known fact that you can safely serve beef to minotaurs without offending them, unless they happen to be vegetarians.'");
}

fun MapEvent3A(context) {
    context.ShowText("The plaque reads: 'A wise hostess will move discretely upwind if a dragon appears about to belch.'");
}

fun MapEvent3B(context) {
    context.ShowText("The plaque reads: 'Virtually none of the inhabitants of Cawdor are offended when you serve harpy at your functions.  Few have the stomach to eat harpy, but none are offended.'");
}
